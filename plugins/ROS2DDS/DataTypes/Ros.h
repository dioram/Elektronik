// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Ros.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _SENSOR_MSGS_MSG_ROS_H_
#define _SENSOR_MSGS_MSG_ROS_H_


#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(Ros_SOURCE)
#define Ros_DllAPI __declspec( dllexport )
#else
#define Ros_DllAPI __declspec( dllimport )
#endif // Ros_SOURCE
#else
#define Ros_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define Ros_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


namespace std_msgs {
    namespace msg {
        /*!
         * @brief This class represents the structure Time defined by the user in the IDL file.
         * @ingroup ROS
         */
        class Time
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport Time();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~Time();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object std_msgs::msg::Time that will be copied.
             */
            eProsima_user_DllExport Time(
                    const Time& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object std_msgs::msg::Time that will be copied.
             */
            eProsima_user_DllExport Time(
                    Time&& x);

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object std_msgs::msg::Time that will be copied.
             */
            eProsima_user_DllExport Time& operator =(
                    const Time& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object std_msgs::msg::Time that will be copied.
             */
            eProsima_user_DllExport Time& operator =(
                    Time&& x);

            /*!
             * @brief This function sets a value in member sec
             * @param _sec New value for member sec
             */
            eProsima_user_DllExport void sec(
                    int32_t _sec);

            /*!
             * @brief This function returns the value of member sec
             * @return Value of member sec
             */
            eProsima_user_DllExport int32_t sec() const;

            /*!
             * @brief This function returns a reference to member sec
             * @return Reference to member sec
             */
            eProsima_user_DllExport int32_t& sec();

            /*!
             * @brief This function sets a value in member nanosec
             * @param _nanosec New value for member nanosec
             */
            eProsima_user_DllExport void nanosec(
                    uint32_t _nanosec);

            /*!
             * @brief This function returns the value of member nanosec
             * @return Value of member nanosec
             */
            eProsima_user_DllExport uint32_t nanosec() const;

            /*!
             * @brief This function returns a reference to member nanosec
             * @return Reference to member nanosec
             */
            eProsima_user_DllExport uint32_t& nanosec();


            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const std_msgs::msg::Time& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            int32_t m_sec;
            uint32_t m_nanosec;
        };
        /*!
         * @brief This class represents the structure Header defined by the user in the IDL file.
         * @ingroup ROS
         */
        class Header
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport Header();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~Header();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object std_msgs::msg::Header that will be copied.
             */
            eProsima_user_DllExport Header(
                    const Header& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object std_msgs::msg::Header that will be copied.
             */
            eProsima_user_DllExport Header(
                    Header&& x);

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object std_msgs::msg::Header that will be copied.
             */
            eProsima_user_DllExport Header& operator =(
                    const Header& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object std_msgs::msg::Header that will be copied.
             */
            eProsima_user_DllExport Header& operator =(
                    Header&& x);

            /*!
             * @brief This function copies the value in member stamp
             * @param _stamp New value to be copied in member stamp
             */
            eProsima_user_DllExport void stamp(
                    const std_msgs::msg::Time& _stamp);

            /*!
             * @brief This function moves the value in member stamp
             * @param _stamp New value to be moved in member stamp
             */
            eProsima_user_DllExport void stamp(
                    std_msgs::msg::Time&& _stamp);

            /*!
             * @brief This function returns a constant reference to member stamp
             * @return Constant reference to member stamp
             */
            eProsima_user_DllExport const std_msgs::msg::Time& stamp() const;

            /*!
             * @brief This function returns a reference to member stamp
             * @return Reference to member stamp
             */
            eProsima_user_DllExport std_msgs::msg::Time& stamp();
            /*!
             * @brief This function copies the value in member frame_id
             * @param _frame_id New value to be copied in member frame_id
             */
            eProsima_user_DllExport void frame_id(
                    const std::string& _frame_id);

            /*!
             * @brief This function moves the value in member frame_id
             * @param _frame_id New value to be moved in member frame_id
             */
            eProsima_user_DllExport void frame_id(
                    std::string&& _frame_id);

            /*!
             * @brief This function returns a constant reference to member frame_id
             * @return Constant reference to member frame_id
             */
            eProsima_user_DllExport const std::string& frame_id() const;

            /*!
             * @brief This function returns a reference to member frame_id
             * @return Reference to member frame_id
             */
            eProsima_user_DllExport std::string& frame_id();

            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const std_msgs::msg::Header& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            std_msgs::msg::Time m_stamp;
            std::string m_frame_id;
        };
    } // namespace msg
} // namespace std_msgs
namespace geometry_msgs {
    namespace msg {
        /*!
         * @brief This class represents the structure Point defined by the user in the IDL file.
         * @ingroup ROS
         */
        class Point
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport Point();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~Point();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object geometry_msgs::msg::Point that will be copied.
             */
            eProsima_user_DllExport Point(
                    const Point& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object geometry_msgs::msg::Point that will be copied.
             */
            eProsima_user_DllExport Point(
                    Point&& x);

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object geometry_msgs::msg::Point that will be copied.
             */
            eProsima_user_DllExport Point& operator =(
                    const Point& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object geometry_msgs::msg::Point that will be copied.
             */
            eProsima_user_DllExport Point& operator =(
                    Point&& x);

            /*!
             * @brief This function sets a value in member x
             * @param _x New value for member x
             */
            eProsima_user_DllExport void x(
                    double _x);

            /*!
             * @brief This function returns the value of member x
             * @return Value of member x
             */
            eProsima_user_DllExport double x() const;

            /*!
             * @brief This function returns a reference to member x
             * @return Reference to member x
             */
            eProsima_user_DllExport double& x();

            /*!
             * @brief This function sets a value in member y
             * @param _y New value for member y
             */
            eProsima_user_DllExport void y(
                    double _y);

            /*!
             * @brief This function returns the value of member y
             * @return Value of member y
             */
            eProsima_user_DllExport double y() const;

            /*!
             * @brief This function returns a reference to member y
             * @return Reference to member y
             */
            eProsima_user_DllExport double& y();

            /*!
             * @brief This function sets a value in member z
             * @param _z New value for member z
             */
            eProsima_user_DllExport void z(
                    double _z);

            /*!
             * @brief This function returns the value of member z
             * @return Value of member z
             */
            eProsima_user_DllExport double z() const;

            /*!
             * @brief This function returns a reference to member z
             * @return Reference to member z
             */
            eProsima_user_DllExport double& z();


            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const geometry_msgs::msg::Point& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            double m_x;
            double m_y;
            double m_z;
        };
        /*!
         * @brief This class represents the structure Quaternion defined by the user in the IDL file.
         * @ingroup ROS
         */
        class Quaternion
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport Quaternion();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~Quaternion();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object geometry_msgs::msg::Quaternion that will be copied.
             */
            eProsima_user_DllExport Quaternion(
                    const Quaternion& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object geometry_msgs::msg::Quaternion that will be copied.
             */
            eProsima_user_DllExport Quaternion(
                    Quaternion&& x);

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object geometry_msgs::msg::Quaternion that will be copied.
             */
            eProsima_user_DllExport Quaternion& operator =(
                    const Quaternion& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object geometry_msgs::msg::Quaternion that will be copied.
             */
            eProsima_user_DllExport Quaternion& operator =(
                    Quaternion&& x);

            /*!
             * @brief This function sets a value in member x
             * @param _x New value for member x
             */
            eProsima_user_DllExport void x(
                    double _x);

            /*!
             * @brief This function returns the value of member x
             * @return Value of member x
             */
            eProsima_user_DllExport double x() const;

            /*!
             * @brief This function returns a reference to member x
             * @return Reference to member x
             */
            eProsima_user_DllExport double& x();

            /*!
             * @brief This function sets a value in member y
             * @param _y New value for member y
             */
            eProsima_user_DllExport void y(
                    double _y);

            /*!
             * @brief This function returns the value of member y
             * @return Value of member y
             */
            eProsima_user_DllExport double y() const;

            /*!
             * @brief This function returns a reference to member y
             * @return Reference to member y
             */
            eProsima_user_DllExport double& y();

            /*!
             * @brief This function sets a value in member z
             * @param _z New value for member z
             */
            eProsima_user_DllExport void z(
                    double _z);

            /*!
             * @brief This function returns the value of member z
             * @return Value of member z
             */
            eProsima_user_DllExport double z() const;

            /*!
             * @brief This function returns a reference to member z
             * @return Reference to member z
             */
            eProsima_user_DllExport double& z();

            /*!
             * @brief This function sets a value in member w
             * @param _w New value for member w
             */
            eProsima_user_DllExport void w(
                    double _w);

            /*!
             * @brief This function returns the value of member w
             * @return Value of member w
             */
            eProsima_user_DllExport double w() const;

            /*!
             * @brief This function returns a reference to member w
             * @return Reference to member w
             */
            eProsima_user_DllExport double& w();


            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const geometry_msgs::msg::Quaternion& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            double m_x;
            double m_y;
            double m_z;
            double m_w;
        };
        /*!
         * @brief This class represents the structure Pose defined by the user in the IDL file.
         * @ingroup ROS
         */
        class Pose
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport Pose();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~Pose();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object geometry_msgs::msg::Pose that will be copied.
             */
            eProsima_user_DllExport Pose(
                    const Pose& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object geometry_msgs::msg::Pose that will be copied.
             */
            eProsima_user_DllExport Pose(
                    Pose&& x);

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object geometry_msgs::msg::Pose that will be copied.
             */
            eProsima_user_DllExport Pose& operator =(
                    const Pose& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object geometry_msgs::msg::Pose that will be copied.
             */
            eProsima_user_DllExport Pose& operator =(
                    Pose&& x);

            /*!
             * @brief This function copies the value in member position
             * @param _position New value to be copied in member position
             */
            eProsima_user_DllExport void position(
                    const geometry_msgs::msg::Point& _position);

            /*!
             * @brief This function moves the value in member position
             * @param _position New value to be moved in member position
             */
            eProsima_user_DllExport void position(
                    geometry_msgs::msg::Point&& _position);

            /*!
             * @brief This function returns a constant reference to member position
             * @return Constant reference to member position
             */
            eProsima_user_DllExport const geometry_msgs::msg::Point& position() const;

            /*!
             * @brief This function returns a reference to member position
             * @return Reference to member position
             */
            eProsima_user_DllExport geometry_msgs::msg::Point& position();
            /*!
             * @brief This function copies the value in member orientation
             * @param _orientation New value to be copied in member orientation
             */
            eProsima_user_DllExport void orientation(
                    const geometry_msgs::msg::Quaternion& _orientation);

            /*!
             * @brief This function moves the value in member orientation
             * @param _orientation New value to be moved in member orientation
             */
            eProsima_user_DllExport void orientation(
                    geometry_msgs::msg::Quaternion&& _orientation);

            /*!
             * @brief This function returns a constant reference to member orientation
             * @return Constant reference to member orientation
             */
            eProsima_user_DllExport const geometry_msgs::msg::Quaternion& orientation() const;

            /*!
             * @brief This function returns a reference to member orientation
             * @return Reference to member orientation
             */
            eProsima_user_DllExport geometry_msgs::msg::Quaternion& orientation();

            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const geometry_msgs::msg::Pose& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            geometry_msgs::msg::Point m_position;
            geometry_msgs::msg::Quaternion m_orientation;
        };

        typedef std::array<double, 36> geometry_msgs__PoseWithCovariance__double_array_36;
        /*!
         * @brief This class represents the structure PoseWithCovariance defined by the user in the IDL file.
         * @ingroup ROS
         */
        class PoseWithCovariance
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport PoseWithCovariance();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~PoseWithCovariance();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object geometry_msgs::msg::PoseWithCovariance that will be copied.
             */
            eProsima_user_DllExport PoseWithCovariance(
                    const PoseWithCovariance& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object geometry_msgs::msg::PoseWithCovariance that will be copied.
             */
            eProsima_user_DllExport PoseWithCovariance(
                    PoseWithCovariance&& x);

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object geometry_msgs::msg::PoseWithCovariance that will be copied.
             */
            eProsima_user_DllExport PoseWithCovariance& operator =(
                    const PoseWithCovariance& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object geometry_msgs::msg::PoseWithCovariance that will be copied.
             */
            eProsima_user_DllExport PoseWithCovariance& operator =(
                    PoseWithCovariance&& x);

            /*!
             * @brief This function copies the value in member pose
             * @param _pose New value to be copied in member pose
             */
            eProsima_user_DllExport void pose(
                    const geometry_msgs::msg::Pose& _pose);

            /*!
             * @brief This function moves the value in member pose
             * @param _pose New value to be moved in member pose
             */
            eProsima_user_DllExport void pose(
                    geometry_msgs::msg::Pose&& _pose);

            /*!
             * @brief This function returns a constant reference to member pose
             * @return Constant reference to member pose
             */
            eProsima_user_DllExport const geometry_msgs::msg::Pose& pose() const;

            /*!
             * @brief This function returns a reference to member pose
             * @return Reference to member pose
             */
            eProsima_user_DllExport geometry_msgs::msg::Pose& pose();
            /*!
             * @brief This function copies the value in member covariance
             * @param _covariance New value to be copied in member covariance
             */
            eProsima_user_DllExport void covariance(
                    const geometry_msgs::msg::geometry_msgs__PoseWithCovariance__double_array_36& _covariance);

            /*!
             * @brief This function moves the value in member covariance
             * @param _covariance New value to be moved in member covariance
             */
            eProsima_user_DllExport void covariance(
                    geometry_msgs::msg::geometry_msgs__PoseWithCovariance__double_array_36&& _covariance);

            /*!
             * @brief This function returns a constant reference to member covariance
             * @return Constant reference to member covariance
             */
            eProsima_user_DllExport const geometry_msgs::msg::geometry_msgs__PoseWithCovariance__double_array_36& covariance() const;

            /*!
             * @brief This function returns a reference to member covariance
             * @return Reference to member covariance
             */
            eProsima_user_DllExport geometry_msgs::msg::geometry_msgs__PoseWithCovariance__double_array_36& covariance();

            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const geometry_msgs::msg::PoseWithCovariance& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            geometry_msgs::msg::Pose m_pose;
            geometry_msgs::msg::geometry_msgs__PoseWithCovariance__double_array_36 m_covariance;
        };
        /*!
         * @brief This class represents the structure Vector3 defined by the user in the IDL file.
         * @ingroup ROS
         */
        class Vector3
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport Vector3();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~Vector3();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object geometry_msgs::msg::Vector3 that will be copied.
             */
            eProsima_user_DllExport Vector3(
                    const Vector3& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object geometry_msgs::msg::Vector3 that will be copied.
             */
            eProsima_user_DllExport Vector3(
                    Vector3&& x);

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object geometry_msgs::msg::Vector3 that will be copied.
             */
            eProsima_user_DllExport Vector3& operator =(
                    const Vector3& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object geometry_msgs::msg::Vector3 that will be copied.
             */
            eProsima_user_DllExport Vector3& operator =(
                    Vector3&& x);

            /*!
             * @brief This function sets a value in member x
             * @param _x New value for member x
             */
            eProsima_user_DllExport void x(
                    double _x);

            /*!
             * @brief This function returns the value of member x
             * @return Value of member x
             */
            eProsima_user_DllExport double x() const;

            /*!
             * @brief This function returns a reference to member x
             * @return Reference to member x
             */
            eProsima_user_DllExport double& x();

            /*!
             * @brief This function sets a value in member y
             * @param _y New value for member y
             */
            eProsima_user_DllExport void y(
                    double _y);

            /*!
             * @brief This function returns the value of member y
             * @return Value of member y
             */
            eProsima_user_DllExport double y() const;

            /*!
             * @brief This function returns a reference to member y
             * @return Reference to member y
             */
            eProsima_user_DllExport double& y();

            /*!
             * @brief This function sets a value in member z
             * @param _z New value for member z
             */
            eProsima_user_DllExport void z(
                    double _z);

            /*!
             * @brief This function returns the value of member z
             * @return Value of member z
             */
            eProsima_user_DllExport double z() const;

            /*!
             * @brief This function returns a reference to member z
             * @return Reference to member z
             */
            eProsima_user_DllExport double& z();


            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const geometry_msgs::msg::Vector3& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            double m_x;
            double m_y;
            double m_z;
        };
        /*!
         * @brief This class represents the structure Twist defined by the user in the IDL file.
         * @ingroup ROS
         */
        class Twist
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport Twist();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~Twist();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object geometry_msgs::msg::Twist that will be copied.
             */
            eProsima_user_DllExport Twist(
                    const Twist& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object geometry_msgs::msg::Twist that will be copied.
             */
            eProsima_user_DllExport Twist(
                    Twist&& x);

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object geometry_msgs::msg::Twist that will be copied.
             */
            eProsima_user_DllExport Twist& operator =(
                    const Twist& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object geometry_msgs::msg::Twist that will be copied.
             */
            eProsima_user_DllExport Twist& operator =(
                    Twist&& x);

            /*!
             * @brief This function copies the value in member linear
             * @param _linear New value to be copied in member linear
             */
            eProsima_user_DllExport void linear(
                    const geometry_msgs::msg::Vector3& _linear);

            /*!
             * @brief This function moves the value in member linear
             * @param _linear New value to be moved in member linear
             */
            eProsima_user_DllExport void linear(
                    geometry_msgs::msg::Vector3&& _linear);

            /*!
             * @brief This function returns a constant reference to member linear
             * @return Constant reference to member linear
             */
            eProsima_user_DllExport const geometry_msgs::msg::Vector3& linear() const;

            /*!
             * @brief This function returns a reference to member linear
             * @return Reference to member linear
             */
            eProsima_user_DllExport geometry_msgs::msg::Vector3& linear();
            /*!
             * @brief This function copies the value in member angular
             * @param _angular New value to be copied in member angular
             */
            eProsima_user_DllExport void angular(
                    const geometry_msgs::msg::Vector3& _angular);

            /*!
             * @brief This function moves the value in member angular
             * @param _angular New value to be moved in member angular
             */
            eProsima_user_DllExport void angular(
                    geometry_msgs::msg::Vector3&& _angular);

            /*!
             * @brief This function returns a constant reference to member angular
             * @return Constant reference to member angular
             */
            eProsima_user_DllExport const geometry_msgs::msg::Vector3& angular() const;

            /*!
             * @brief This function returns a reference to member angular
             * @return Reference to member angular
             */
            eProsima_user_DllExport geometry_msgs::msg::Vector3& angular();

            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const geometry_msgs::msg::Twist& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            geometry_msgs::msg::Vector3 m_linear;
            geometry_msgs::msg::Vector3 m_angular;
        };

        typedef std::array<double, 36> geometry_msgs__TwistWithCovariance__double_array_36;
        /*!
         * @brief This class represents the structure TwistWithCovariance defined by the user in the IDL file.
         * @ingroup ROS
         */
        class TwistWithCovariance
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport TwistWithCovariance();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~TwistWithCovariance();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object geometry_msgs::msg::TwistWithCovariance that will be copied.
             */
            eProsima_user_DllExport TwistWithCovariance(
                    const TwistWithCovariance& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object geometry_msgs::msg::TwistWithCovariance that will be copied.
             */
            eProsima_user_DllExport TwistWithCovariance(
                    TwistWithCovariance&& x);

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object geometry_msgs::msg::TwistWithCovariance that will be copied.
             */
            eProsima_user_DllExport TwistWithCovariance& operator =(
                    const TwistWithCovariance& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object geometry_msgs::msg::TwistWithCovariance that will be copied.
             */
            eProsima_user_DllExport TwistWithCovariance& operator =(
                    TwistWithCovariance&& x);

            /*!
             * @brief This function copies the value in member twist
             * @param _twist New value to be copied in member twist
             */
            eProsima_user_DllExport void twist(
                    const geometry_msgs::msg::Twist& _twist);

            /*!
             * @brief This function moves the value in member twist
             * @param _twist New value to be moved in member twist
             */
            eProsima_user_DllExport void twist(
                    geometry_msgs::msg::Twist&& _twist);

            /*!
             * @brief This function returns a constant reference to member twist
             * @return Constant reference to member twist
             */
            eProsima_user_DllExport const geometry_msgs::msg::Twist& twist() const;

            /*!
             * @brief This function returns a reference to member twist
             * @return Reference to member twist
             */
            eProsima_user_DllExport geometry_msgs::msg::Twist& twist();
            /*!
             * @brief This function copies the value in member covariance
             * @param _covariance New value to be copied in member covariance
             */
            eProsima_user_DllExport void covariance(
                    const geometry_msgs::msg::geometry_msgs__TwistWithCovariance__double_array_36& _covariance);

            /*!
             * @brief This function moves the value in member covariance
             * @param _covariance New value to be moved in member covariance
             */
            eProsima_user_DllExport void covariance(
                    geometry_msgs::msg::geometry_msgs__TwistWithCovariance__double_array_36&& _covariance);

            /*!
             * @brief This function returns a constant reference to member covariance
             * @return Constant reference to member covariance
             */
            eProsima_user_DllExport const geometry_msgs::msg::geometry_msgs__TwistWithCovariance__double_array_36& covariance() const;

            /*!
             * @brief This function returns a reference to member covariance
             * @return Reference to member covariance
             */
            eProsima_user_DllExport geometry_msgs::msg::geometry_msgs__TwistWithCovariance__double_array_36& covariance();

            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const geometry_msgs::msg::TwistWithCovariance& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            geometry_msgs::msg::Twist m_twist;
            geometry_msgs::msg::geometry_msgs__TwistWithCovariance__double_array_36 m_covariance;
        };
        /*!
         * @brief This class represents the structure PointStamped defined by the user in the IDL file.
         * @ingroup ROS
         */
        class PointStamped
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport PointStamped();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~PointStamped();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object geometry_msgs::msg::PointStamped that will be copied.
             */
            eProsima_user_DllExport PointStamped(
                    const PointStamped& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object geometry_msgs::msg::PointStamped that will be copied.
             */
            eProsima_user_DllExport PointStamped(
                    PointStamped&& x);

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object geometry_msgs::msg::PointStamped that will be copied.
             */
            eProsima_user_DllExport PointStamped& operator =(
                    const PointStamped& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object geometry_msgs::msg::PointStamped that will be copied.
             */
            eProsima_user_DllExport PointStamped& operator =(
                    PointStamped&& x);

            /*!
             * @brief This function copies the value in member header
             * @param _header New value to be copied in member header
             */
            eProsima_user_DllExport void header(
                    const std_msgs::msg::Header& _header);

            /*!
             * @brief This function moves the value in member header
             * @param _header New value to be moved in member header
             */
            eProsima_user_DllExport void header(
                    std_msgs::msg::Header&& _header);

            /*!
             * @brief This function returns a constant reference to member header
             * @return Constant reference to member header
             */
            eProsima_user_DllExport const std_msgs::msg::Header& header() const;

            /*!
             * @brief This function returns a reference to member header
             * @return Reference to member header
             */
            eProsima_user_DllExport std_msgs::msg::Header& header();
            /*!
             * @brief This function copies the value in member point
             * @param _point New value to be copied in member point
             */
            eProsima_user_DllExport void point(
                    const geometry_msgs::msg::Point& _point);

            /*!
             * @brief This function moves the value in member point
             * @param _point New value to be moved in member point
             */
            eProsima_user_DllExport void point(
                    geometry_msgs::msg::Point&& _point);

            /*!
             * @brief This function returns a constant reference to member point
             * @return Constant reference to member point
             */
            eProsima_user_DllExport const geometry_msgs::msg::Point& point() const;

            /*!
             * @brief This function returns a reference to member point
             * @return Reference to member point
             */
            eProsima_user_DllExport geometry_msgs::msg::Point& point();

            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const geometry_msgs::msg::PointStamped& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            std_msgs::msg::Header m_header;
            geometry_msgs::msg::Point m_point;
        };
        /*!
         * @brief This class represents the structure PoseStamped defined by the user in the IDL file.
         * @ingroup ROS
         */
        class PoseStamped
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport PoseStamped();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~PoseStamped();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object geometry_msgs::msg::PoseStamped that will be copied.
             */
            eProsima_user_DllExport PoseStamped(
                    const PoseStamped& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object geometry_msgs::msg::PoseStamped that will be copied.
             */
            eProsima_user_DllExport PoseStamped(
                    PoseStamped&& x);

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object geometry_msgs::msg::PoseStamped that will be copied.
             */
            eProsima_user_DllExport PoseStamped& operator =(
                    const PoseStamped& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object geometry_msgs::msg::PoseStamped that will be copied.
             */
            eProsima_user_DllExport PoseStamped& operator =(
                    PoseStamped&& x);

            /*!
             * @brief This function copies the value in member header
             * @param _header New value to be copied in member header
             */
            eProsima_user_DllExport void header(
                    const std_msgs::msg::Header& _header);

            /*!
             * @brief This function moves the value in member header
             * @param _header New value to be moved in member header
             */
            eProsima_user_DllExport void header(
                    std_msgs::msg::Header&& _header);

            /*!
             * @brief This function returns a constant reference to member header
             * @return Constant reference to member header
             */
            eProsima_user_DllExport const std_msgs::msg::Header& header() const;

            /*!
             * @brief This function returns a reference to member header
             * @return Reference to member header
             */
            eProsima_user_DllExport std_msgs::msg::Header& header();
            /*!
             * @brief This function copies the value in member pose
             * @param _pose New value to be copied in member pose
             */
            eProsima_user_DllExport void pose(
                    const geometry_msgs::msg::Pose& _pose);

            /*!
             * @brief This function moves the value in member pose
             * @param _pose New value to be moved in member pose
             */
            eProsima_user_DllExport void pose(
                    geometry_msgs::msg::Pose&& _pose);

            /*!
             * @brief This function returns a constant reference to member pose
             * @return Constant reference to member pose
             */
            eProsima_user_DllExport const geometry_msgs::msg::Pose& pose() const;

            /*!
             * @brief This function returns a reference to member pose
             * @return Reference to member pose
             */
            eProsima_user_DllExport geometry_msgs::msg::Pose& pose();

            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const geometry_msgs::msg::PoseStamped& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            std_msgs::msg::Header m_header;
            geometry_msgs::msg::Pose m_pose;
        };
    } // namespace msg
} // namespace geometry_msgs
namespace nav_msgs {
    namespace msg {
        /*!
         * @brief This class represents the structure Odometry defined by the user in the IDL file.
         * @ingroup ROS
         */
        class Odometry
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport Odometry();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~Odometry();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object nav_msgs::msg::Odometry that will be copied.
             */
            eProsima_user_DllExport Odometry(
                    const Odometry& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object nav_msgs::msg::Odometry that will be copied.
             */
            eProsima_user_DllExport Odometry(
                    Odometry&& x);

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object nav_msgs::msg::Odometry that will be copied.
             */
            eProsima_user_DllExport Odometry& operator =(
                    const Odometry& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object nav_msgs::msg::Odometry that will be copied.
             */
            eProsima_user_DllExport Odometry& operator =(
                    Odometry&& x);

            /*!
             * @brief This function copies the value in member header
             * @param _header New value to be copied in member header
             */
            eProsima_user_DllExport void header(
                    const std_msgs::msg::Header& _header);

            /*!
             * @brief This function moves the value in member header
             * @param _header New value to be moved in member header
             */
            eProsima_user_DllExport void header(
                    std_msgs::msg::Header&& _header);

            /*!
             * @brief This function returns a constant reference to member header
             * @return Constant reference to member header
             */
            eProsima_user_DllExport const std_msgs::msg::Header& header() const;

            /*!
             * @brief This function returns a reference to member header
             * @return Reference to member header
             */
            eProsima_user_DllExport std_msgs::msg::Header& header();
            /*!
             * @brief This function copies the value in member child_frame_id
             * @param _child_frame_id New value to be copied in member child_frame_id
             */
            eProsima_user_DllExport void child_frame_id(
                    const std::string& _child_frame_id);

            /*!
             * @brief This function moves the value in member child_frame_id
             * @param _child_frame_id New value to be moved in member child_frame_id
             */
            eProsima_user_DllExport void child_frame_id(
                    std::string&& _child_frame_id);

            /*!
             * @brief This function returns a constant reference to member child_frame_id
             * @return Constant reference to member child_frame_id
             */
            eProsima_user_DllExport const std::string& child_frame_id() const;

            /*!
             * @brief This function returns a reference to member child_frame_id
             * @return Reference to member child_frame_id
             */
            eProsima_user_DllExport std::string& child_frame_id();
            /*!
             * @brief This function copies the value in member pose
             * @param _pose New value to be copied in member pose
             */
            eProsima_user_DllExport void pose(
                    const geometry_msgs::msg::PoseWithCovariance& _pose);

            /*!
             * @brief This function moves the value in member pose
             * @param _pose New value to be moved in member pose
             */
            eProsima_user_DllExport void pose(
                    geometry_msgs::msg::PoseWithCovariance&& _pose);

            /*!
             * @brief This function returns a constant reference to member pose
             * @return Constant reference to member pose
             */
            eProsima_user_DllExport const geometry_msgs::msg::PoseWithCovariance& pose() const;

            /*!
             * @brief This function returns a reference to member pose
             * @return Reference to member pose
             */
            eProsima_user_DllExport geometry_msgs::msg::PoseWithCovariance& pose();
            /*!
             * @brief This function copies the value in member twist
             * @param _twist New value to be copied in member twist
             */
            eProsima_user_DllExport void twist(
                    const geometry_msgs::msg::TwistWithCovariance& _twist);

            /*!
             * @brief This function moves the value in member twist
             * @param _twist New value to be moved in member twist
             */
            eProsima_user_DllExport void twist(
                    geometry_msgs::msg::TwistWithCovariance&& _twist);

            /*!
             * @brief This function returns a constant reference to member twist
             * @return Constant reference to member twist
             */
            eProsima_user_DllExport const geometry_msgs::msg::TwistWithCovariance& twist() const;

            /*!
             * @brief This function returns a reference to member twist
             * @return Reference to member twist
             */
            eProsima_user_DllExport geometry_msgs::msg::TwistWithCovariance& twist();

            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const nav_msgs::msg::Odometry& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            std_msgs::msg::Header m_header;
            std::string m_child_frame_id;
            geometry_msgs::msg::PoseWithCovariance m_pose;
            geometry_msgs::msg::TwistWithCovariance m_twist;
        };
    } // namespace msg
} // namespace nav_msgs
namespace sensor_msgs {
    namespace msg {
        const uint8_t PointField__INT8 = 1;
        const uint8_t PointField__UINT8 = 2;
        const uint8_t PointField__INT16 = 3;
        const uint8_t PointField__UINT16 = 4;
        const uint8_t PointField__INT32 = 5;
        const uint8_t PointField__UINT32 = 6;
        const uint8_t PointField__FLOAT32 = 7;
        const uint8_t PointField__FLOAT64 = 8;
        /*!
         * @brief This class represents the structure PointField defined by the user in the IDL file.
         * @ingroup ROS
         */
        class PointField
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport PointField();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~PointField();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object sensor_msgs::msg::PointField that will be copied.
             */
            eProsima_user_DllExport PointField(
                    const PointField& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object sensor_msgs::msg::PointField that will be copied.
             */
            eProsima_user_DllExport PointField(
                    PointField&& x);

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object sensor_msgs::msg::PointField that will be copied.
             */
            eProsima_user_DllExport PointField& operator =(
                    const PointField& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object sensor_msgs::msg::PointField that will be copied.
             */
            eProsima_user_DllExport PointField& operator =(
                    PointField&& x);

            /*!
             * @brief This function copies the value in member name
             * @param _name New value to be copied in member name
             */
            eProsima_user_DllExport void name(
                    const std::string& _name);

            /*!
             * @brief This function moves the value in member name
             * @param _name New value to be moved in member name
             */
            eProsima_user_DllExport void name(
                    std::string&& _name);

            /*!
             * @brief This function returns a constant reference to member name
             * @return Constant reference to member name
             */
            eProsima_user_DllExport const std::string& name() const;

            /*!
             * @brief This function returns a reference to member name
             * @return Reference to member name
             */
            eProsima_user_DllExport std::string& name();
            /*!
             * @brief This function sets a value in member offset
             * @param _offset New value for member offset
             */
            eProsima_user_DllExport void offset(
                    uint32_t _offset);

            /*!
             * @brief This function returns the value of member offset
             * @return Value of member offset
             */
            eProsima_user_DllExport uint32_t offset() const;

            /*!
             * @brief This function returns a reference to member offset
             * @return Reference to member offset
             */
            eProsima_user_DllExport uint32_t& offset();

            /*!
             * @brief This function sets a value in member datatype
             * @param _datatype New value for member datatype
             */
            eProsima_user_DllExport void datatype(
                    uint8_t _datatype);

            /*!
             * @brief This function returns the value of member datatype
             * @return Value of member datatype
             */
            eProsima_user_DllExport uint8_t datatype() const;

            /*!
             * @brief This function returns a reference to member datatype
             * @return Reference to member datatype
             */
            eProsima_user_DllExport uint8_t& datatype();

            /*!
             * @brief This function sets a value in member count
             * @param _count New value for member count
             */
            eProsima_user_DllExport void count(
                    uint32_t _count);

            /*!
             * @brief This function returns the value of member count
             * @return Value of member count
             */
            eProsima_user_DllExport uint32_t count() const;

            /*!
             * @brief This function returns a reference to member count
             * @return Reference to member count
             */
            eProsima_user_DllExport uint32_t& count();


            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const sensor_msgs::msg::PointField& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            std::string m_name;
            uint32_t m_offset;
            uint8_t m_datatype;
            uint32_t m_count;
        };
        /*!
         * @brief This class represents the structure PointCloud2 defined by the user in the IDL file.
         * @ingroup ROS
         */
        class PointCloud2
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport PointCloud2();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~PointCloud2();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object sensor_msgs::msg::PointCloud2 that will be copied.
             */
            eProsima_user_DllExport PointCloud2(
                    const PointCloud2& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object sensor_msgs::msg::PointCloud2 that will be copied.
             */
            eProsima_user_DllExport PointCloud2(
                    PointCloud2&& x);

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object sensor_msgs::msg::PointCloud2 that will be copied.
             */
            eProsima_user_DllExport PointCloud2& operator =(
                    const PointCloud2& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object sensor_msgs::msg::PointCloud2 that will be copied.
             */
            eProsima_user_DllExport PointCloud2& operator =(
                    PointCloud2&& x);

            /*!
             * @brief This function copies the value in member header
             * @param _header New value to be copied in member header
             */
            eProsima_user_DllExport void header(
                    const std_msgs::msg::Header& _header);

            /*!
             * @brief This function moves the value in member header
             * @param _header New value to be moved in member header
             */
            eProsima_user_DllExport void header(
                    std_msgs::msg::Header&& _header);

            /*!
             * @brief This function returns a constant reference to member header
             * @return Constant reference to member header
             */
            eProsima_user_DllExport const std_msgs::msg::Header& header() const;

            /*!
             * @brief This function returns a reference to member header
             * @return Reference to member header
             */
            eProsima_user_DllExport std_msgs::msg::Header& header();
            /*!
             * @brief This function sets a value in member height
             * @param _height New value for member height
             */
            eProsima_user_DllExport void height(
                    uint32_t _height);

            /*!
             * @brief This function returns the value of member height
             * @return Value of member height
             */
            eProsima_user_DllExport uint32_t height() const;

            /*!
             * @brief This function returns a reference to member height
             * @return Reference to member height
             */
            eProsima_user_DllExport uint32_t& height();

            /*!
             * @brief This function sets a value in member width
             * @param _width New value for member width
             */
            eProsima_user_DllExport void width(
                    uint32_t _width);

            /*!
             * @brief This function returns the value of member width
             * @return Value of member width
             */
            eProsima_user_DllExport uint32_t width() const;

            /*!
             * @brief This function returns a reference to member width
             * @return Reference to member width
             */
            eProsima_user_DllExport uint32_t& width();

            /*!
             * @brief This function copies the value in member fields
             * @param _fields New value to be copied in member fields
             */
            eProsima_user_DllExport void fields(
                    const std::vector<sensor_msgs::msg::PointField>& _fields);

            /*!
             * @brief This function moves the value in member fields
             * @param _fields New value to be moved in member fields
             */
            eProsima_user_DllExport void fields(
                    std::vector<sensor_msgs::msg::PointField>&& _fields);

            /*!
             * @brief This function returns a constant reference to member fields
             * @return Constant reference to member fields
             */
            eProsima_user_DllExport const std::vector<sensor_msgs::msg::PointField>& fields() const;

            /*!
             * @brief This function returns a reference to member fields
             * @return Reference to member fields
             */
            eProsima_user_DllExport std::vector<sensor_msgs::msg::PointField>& fields();
            /*!
             * @brief This function sets a value in member is_bigendian
             * @param _is_bigendian New value for member is_bigendian
             */
            eProsima_user_DllExport void is_bigendian(
                    bool _is_bigendian);

            /*!
             * @brief This function returns the value of member is_bigendian
             * @return Value of member is_bigendian
             */
            eProsima_user_DllExport bool is_bigendian() const;

            /*!
             * @brief This function returns a reference to member is_bigendian
             * @return Reference to member is_bigendian
             */
            eProsima_user_DllExport bool& is_bigendian();

            /*!
             * @brief This function sets a value in member point_step
             * @param _point_step New value for member point_step
             */
            eProsima_user_DllExport void point_step(
                    uint32_t _point_step);

            /*!
             * @brief This function returns the value of member point_step
             * @return Value of member point_step
             */
            eProsima_user_DllExport uint32_t point_step() const;

            /*!
             * @brief This function returns a reference to member point_step
             * @return Reference to member point_step
             */
            eProsima_user_DllExport uint32_t& point_step();

            /*!
             * @brief This function sets a value in member row_step
             * @param _row_step New value for member row_step
             */
            eProsima_user_DllExport void row_step(
                    uint32_t _row_step);

            /*!
             * @brief This function returns the value of member row_step
             * @return Value of member row_step
             */
            eProsima_user_DllExport uint32_t row_step() const;

            /*!
             * @brief This function returns a reference to member row_step
             * @return Reference to member row_step
             */
            eProsima_user_DllExport uint32_t& row_step();

            /*!
             * @brief This function copies the value in member data
             * @param _data New value to be copied in member data
             */
            eProsima_user_DllExport void data(
                    const std::vector<uint8_t>& _data);

            /*!
             * @brief This function moves the value in member data
             * @param _data New value to be moved in member data
             */
            eProsima_user_DllExport void data(
                    std::vector<uint8_t>&& _data);

            /*!
             * @brief This function returns a constant reference to member data
             * @return Constant reference to member data
             */
            eProsima_user_DllExport const std::vector<uint8_t>& data() const;

            /*!
             * @brief This function returns a reference to member data
             * @return Reference to member data
             */
            eProsima_user_DllExport std::vector<uint8_t>& data();
            /*!
             * @brief This function sets a value in member is_dense
             * @param _is_dense New value for member is_dense
             */
            eProsima_user_DllExport void is_dense(
                    bool _is_dense);

            /*!
             * @brief This function returns the value of member is_dense
             * @return Value of member is_dense
             */
            eProsima_user_DllExport bool is_dense() const;

            /*!
             * @brief This function returns a reference to member is_dense
             * @return Reference to member is_dense
             */
            eProsima_user_DllExport bool& is_dense();


            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const sensor_msgs::msg::PointCloud2& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            std_msgs::msg::Header m_header;
            uint32_t m_height;
            uint32_t m_width;
            std::vector<sensor_msgs::msg::PointField> m_fields;
            bool m_is_bigendian;
            uint32_t m_point_step;
            uint32_t m_row_step;
            std::vector<uint8_t> m_data;
            bool m_is_dense;
        };
    } // namespace msg
} // namespace sensor_msgs

#endif // _SENSOR_MSGS_MSG_ROS_H_