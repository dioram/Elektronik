name: Build and release
on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  build:
    name: Build for StandaloneWindows64
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true
      - uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64
      - name: Build unity player
        run: .\.github\build.bat ${{ secrets.UNITY_SERIAL }} ${{ secrets.UNITY_USERNAME }} ${{ secrets.UNITY_PASSWORD }}
  runTest:
    name: Run tests
    runs-on: self-hosted
    needs: build
    steps:
      - name: Report unity editor tests
        uses: zyborg/dotnet-tests-report@v1
        with:
          test_results_path: .\tests.xml
          fail_build_on_failed_tests: true
          report_name: unity_editor_tests
          report_title: Unity editor tests
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Run protobuf plugin unit tests
        uses: zyborg/dotnet-tests-report@v1
        with:
          project_path: plugins/Protobuf.Tests.Internal
          fail_build_on_failed_tests: true
          report_name: protobuf_unit_tests
          report_title: Protobuf unit tests
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Run ROS plugin unit tests
        uses: zyborg/dotnet-tests-report@v1
        with:
          project_path: plugins/ROS.Tests
          fail_build_on_failed_tests: true
          report_name: ros_unit_tests
          report_title: ROS unit tests
          github_token: ${{ secrets.GITHUB_TOKEN }}
  release:
    name: Create release
    runs-on: self-hosted
    needs: runTests
    steps:
      - name: Zip artifact
        run: powershell.exe -nologo -noprofile -command "& { Add-Type -A 'System.IO.Compression.FileSystem'; [IO.Compression.ZipFile]::CreateFromDirectory('.\Build', 'build.zip'); }"
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ steps.previoustag.outputs.tag }}
          release_name: Release ${{ steps.previoustag.outputs.tag }}
          body_path: ReleaseNotes.md
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: build.zip
          asset_name: Release.zip
          asset_content_type: application/zip