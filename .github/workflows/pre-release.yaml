name: Build and make pre-release
on:
  push:
    branches:
      - pre-release*
  workflow_dispatch:

jobs:
  build_windows:
    name: Build for windows
    runs-on: [self-hosted, windows]
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true

      - uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Get version
        run: |
          $global:el=cat .\ProjectSettings\ProjectSettings.asset | Select-String -Pattern '(?:bundleVersion: )(\d*\.\d*\.\d*(?:-rc\d*)?)' | % {$_.Matches.Groups[1].Value}
          echo $el
        shell: pwsh

      - name: Building native libs
        run: .\.github\build_natives.bat

      - name: Build unity player
        run: .\.github\build_unity.bat ${{ secrets.UNITY_SERIAL }} ${{ secrets.UNITY_USERNAME }} ${{ secrets.UNITY_PASSWORD }}

      - name: Build plugins
        run: .\.github\build_plugins.bat

      - name: Run protobuf plugin unit tests
        uses: zyborg/dotnet-tests-report@v1
        if: ${{ always() }}
        with:
          project_path: plugins/Protobuf.Tests.Internal
          set_check_status_from_test_outcome: true
          report_name: protobuf_unit_tests_windows
          report_title: Protobuf unit tests windows
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run ROS plugin unit tests
        uses: zyborg/dotnet-tests-report@v1
        if: ${{ always() }}
        with:
          project_path: plugins/Ros.Tests
          set_check_status_from_test_outcome: true
          report_name: ros_unit_tests_windows
          report_title: ROS unit tests windows
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run unity tests
        if: ${{ always() }}
        run: .\.github\run_unity_tests.bat


  build_linux:
    name: Linux build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          lfs: true

      - name: Get version
        run: |
          export el=`cat ./ProjectSettings/ProjectSettings.asset | grep -oP '(?<=bundleVersion: )\d*.\d*.\d*(?:-rc\d*)?'`
          echo $el

      - uses: actions/cache@v2
        with:
          path: Library
          key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-

      - name: Install apt packages
        run: sudo apt -y install make swig curl python libssl-dev

      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '5.0.x'

      - uses: lukka/get-cmake@latest

      - name: Restore artifacts, or setup vcpkg (do not install any package)
        uses: lukka/run-vcpkg@v7
        with:
          setupOnly: true
          appendedCacheKey: 'openssl fastrtps opencv pcl'
          vcpkgGitCommitId: 1257354a3ab0bebd8abe95281ca561537853578c
          vcpkgTriplet: ${{ matrix.triplet }}
          additionalCachedPaths: ${{ env.buildNativeDir }}/vcpkg_installed

      - name: Install vcpkg packages
        run: $VCPKG_ROOT/vcpkg install openssl fastrtps opencv pcl

      - name: Clear vcpkg temp files
        run: |
          rm -rf $VCPKG_ROOT/packages
          rm -rf $VCPKG_ROOT/buildtrees
          rm -rf $VCPKG_ROOT/downloads

      - name: Upload vcpkg logs if failed
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: vcspkg_logs
          path: ${{ github.workspace }}/vcpkg/buildtrees/**/*.log

      - run: sudo chmod +x ./.github/*.sh

      - name: Build ROS2DDS
        run: ../../.github/build_natives.sh
        working-directory: ./plugins/ROS2DDS

      - name: Build MeshReconstructor
        run: ../../.github/build_natives.sh
        working-directory: ./plugins/MeshBuilder

      - name: Build PlanesDetector
        run: ../../.github/build_natives.sh
        working-directory: ./plugins/PlanesDetector

      - name: Build Unity player addressables
        uses: game-ci/unity-builder@v2
        env:
          UNITY_EMAIL: ${{ secrets.UNITY_USERNAME }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
        with:
          buildName: Elektronik
          allowDirtyBuild: true
          buildMethod: Elektronik.Editor.PlayerBuildScript.BuildAddressables
          targetPlatform: StandaloneLinux64

      - name: Build Unity player itself
        uses: game-ci/unity-builder@v2
        env:
          UNITY_EMAIL: ${{ secrets.UNITY_USERNAME }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
        with:
          buildName: Elektronik
          allowDirtyBuild: true
          targetPlatform: StandaloneLinux64
          versioning: None

      - name: Build plugins
        run: |
          sudo chown -R $USER:$USER ${{ github.workspace }}
          ./.github/build_plugins.sh

      - name: Run protobuf plugin unit tests
        uses: zyborg/dotnet-tests-report@v1
        if: always()
        with:
          project_path: plugins/Protobuf.Tests.Internal
          set_check_status_from_test_outcome: true
          report_name: protobuf_unit_tests_linux
          report_title: Protobuf unit tests linux
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run ROS plugin unit tests
        uses: zyborg/dotnet-tests-report@v1
        if: always()
        with:
          project_path: plugins/Ros.Tests
          set_check_status_from_test_outcome: true
          report_name: ros_unit_tests_linux
          report_title: ROS unit tests linux
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run Unity tests
        uses: game-ci/unity-test-runner@v2
        if: always()
        env:
          UNITY_EMAIL: ${{ secrets.UNITY_USERNAME }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
        with:
          testMode: EditMode
          projectPath: ./
          artifactsPath: ./test_artifacts
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          checkName: Unity tests results for linux
        
        
  release:
    name: Create pre-release
    runs-on: self-hosted
    needs: [build_windows, build_linux]
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.el }}
          release_name: Pre-release ${{ env.el }}
          body_path: ReleaseNotes.md
          draft: false
          prerelease: true


  upload_windows:
    name: Upload windows build
    runs-on: [self-hosted, windows]
    needs: release
    steps: 
      - name: Upload Windows release asset
        id: upload-release-asset-win
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build
          asset_name: Release.zip
          asset_content_type: application/zip
          
      - name: Upload Windows VR release asset
        id: upload-release-asset-win-vr
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build_vr
          asset_name: Release_vr.zip
          asset_content_type: application/zip


  upload_linux:
    name: Upload windows build
    runs-on: ubuntu-latest
    needs: release
    steps:
      - name: Build deb package
        run: |
          mkdir -p ./package/opt/elektronik
          cp -r ./build/* ./package/opt/elektronik
          sudo dpkg-deb --build package
          mv package.deb elektronik.deb
          
      - name: Upload Linux release asset
        id: upload-release-asset-linux
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: elektronik.deb
          asset_name: elektronik.deb
          asset_content_type: application/x-deb
          
      - name: Build deb package for VR
        run: |
          rm -rf ./package/opt/elektronik/*
          rm elektronik.deb
          cp -r ./build_vr/* ./package/opt/elektronik
          sudo dpkg-deb --build package
          mv package.deb elektronik_vr.deb

      - name: Upload Linux VR release asset
        id: upload-release-asset-linux-vr
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: elektronik_vr.deb
          asset_name: elektronik_vr.deb
          asset_content_type: application/x-deb
