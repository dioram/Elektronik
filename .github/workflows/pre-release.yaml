name: Build and make pre-release
on:
  push:
    branches:
      - pre-release*
  workflow_dispatch:

jobs:
  init:
    name: Init build
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true
  build_natives:
    name: Build C++ libs
    runs-on: self-hosted
    needs: init
    steps:
      - uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64
      - run: .\.github\build_natives.bat
  build_unity:
    name: Build unity player for StandaloneWindows64
    runs-on: self-hosted
    needs: build_natives
    steps:
      - uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64
      - name: Build unity player
        run: .\.github\build_unity.bat ${{ secrets.UNITY_SERIAL }} ${{ secrets.UNITY_USERNAME }} ${{ secrets.UNITY_PASSWORD }}
  build_plugins:
    name: Build plugins
    runs-on: self-hosted
    needs: build_unity
    steps:
      - uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64
      - run: .\.github\build_plugins.bat
  runTest:
    name: Run tests
    runs-on: self-hosted
    needs:
      - build_plugins
      - build_unity
    steps:
      - name: Run unity editor tests
        run: \"C:\\Program Files\\Unity\\Hub\\Editor\\2020.2.4f1\\Editor\\Unity.exe\" -accept-apiupdate -batchmode -logFile .\Logs\tests.log -projectPath .\ -runTests -testResults .\tests.xml -runSynchronously
      - name: Run protobuf plugin unit tests
        uses: zyborg/dotnet-tests-report@v1
        with:
          project_path: plugins/Protobuf.Tests.Internal
          set_check_status_from_test_outcome: true
          report_name: protobuf_unit_tests
          report_title: Protobuf unit tests
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Run ROS plugin unit tests
        uses: zyborg/dotnet-tests-report@v1
        with:
          project_path: plugins/ROS.Tests
          set_check_status_from_test_outcome: true
          report_name: ros_unit_tests
          report_title: ROS unit tests
          github_token: ${{ secrets.GITHUB_TOKEN }}
  release:
    name: Create pre-release
    runs-on: self-hosted
    needs: runTests
    steps:
      - run: |
          git fetch --unshallow --tags
          echo $?
          git tag --list
      - name: Get previous tag
        id: previoustag
        uses: "WyriHaximus/github-action-get-previous-tag@v1"
      - name: Zip artifact
        run: powershell.exe -nologo -noprofile -command "& { Add-Type -A 'System.IO.Compression.FileSystem'; [IO.Compression.ZipFile]::CreateFromDirectory('.\Build', 'build.zip'); }"
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ steps.previoustag.outputs.tag }}
          release_name: Pre-release ${{ steps.previoustag.outputs.tag }}
          body_path: ReleaseNotes.md
          draft: false
          prerelease: true
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: build.zip
          asset_name: Release.zip
          asset_content_type: application/zip
